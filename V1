-- Check if the script is already loaded
if _G.IceHubLoaded then
    -- Create the warning UI
    local warningGui = Instance.new("ScreenGui")
    warningGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local warningFrame = Instance.new("Frame")
    warningFrame.Size = UDim2.new(0, 300, 0, 100)
    warningFrame.Position = UDim2.new(0.5, -150, 0.5, -50)
    warningFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    warningFrame.BorderSizePixel = 0
    warningFrame.Parent = warningGui
    local warningText = Instance.new("TextLabel")
    warningText.Size = UDim2.new(1, 0, 1, 0)
    warningText.Position = UDim2.new(0, 0, 0, 0)
    warningText.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    warningText.BorderSizePixel = 0
    warningText.Text = "Script already Loaded!"
    warningText.TextColor3 = Color3.fromRGB(255, 255, 255)
    warningText.Font = Enum.Font.SourceSansBold
    warningText.TextSize = 24
    warningText.Parent = warningFrame
    return -- Stop execution if the script is already loaded
end

-- Mark the script as loaded
_G.IceHubLoaded = true

-- Create the ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create the loading bar frame
local loadingBarFrame = Instance.new("Frame")
loadingBarFrame.Size = UDim2.new(0, 300, 0, 50)
loadingBarFrame.Position = UDim2.new(0.5, -150, 0.5, -25)
loadingBarFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
loadingBarFrame.BorderSizePixel = 0
loadingBarFrame.Parent = screenGui

local loadingBar = Instance.new("Frame")
loadingBar.Size = UDim2.new(0, 0, 1, 0)
loadingBar.Position = UDim2.new(0, 0, 0, 0)
loadingBar.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
loadingBar.BorderSizePixel = 0
loadingBar.Parent = loadingBarFrame

-- Print loading progress in the console in one line and update the loading bar
local loadingMessage = "Ice Hub is loading "
for i = 0, 100 do
    print(loadingMessage .. i .. "%")
    loadingBar.Size = UDim2.new(i / 100, 0, 1, 0)
    wait(0.05) -- Adjust the wait time as needed
end

-- Hide the loading bar after loading is complete
loadingBarFrame.Visible = false

-- Create the main frame
local mainFrame = Instance.new("Frame")
mainFrame.Size = UDim2.new(0, 400, 0, 300)
mainFrame.Position = UDim2.new(0.5, -200, 0.5, -150)
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui

-- Create the title
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 50)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
title.BorderSizePixel = 0
title.Text = "Ice Hub"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.SourceSansBold
title.TextSize = 24
title.Parent = mainFrame

-- Create the close button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 50, 0, 50)
closeButton.Position = UDim2.new(1, -50, 0, 0)
closeButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
closeButton.BorderSizePixel = 0
closeButton.Text = "X"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Font = Enum.Font.SourceSansBold
closeButton.TextSize = 24
closeButton.Parent = mainFrame

-- Create the ice cube image
local iceCube = Instance.new("ImageLabel")
iceCube.Size = UDim2.new(0, 100, 0, 100)
iceCube.Position = UDim2.new(0.5, -50, 0.5, -50)
iceCube.BackgroundTransparency = 1
iceCube.Image = "rbxassetid://129272687596260"
iceCube.Visible = false
iceCube.Parent = screenGui

-- Function to close the GUI with animation
local function closeGui()
    mainFrame:TweenPosition(UDim2.new(0.5, -200, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.5, true, function()
        mainFrame.Visible = false
        wait(0.1) -- Add a small delay
        iceCube.Visible = true
    end)
end

-- Connect the close button to the close function
closeButton.MouseButton1Click:Connect(closeGui)

-- Function to make the ice cube draggable
local function makeDraggable(frame)
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Make the ice cube draggable
makeDraggable(iceCube)

-- Error handling
local function handleError(err)
    warn("An error occurred: " .. err)
end

-- Wrap the main code in a pcall to catch errors
local success, err = pcall(function()
    -- Your main code here
end)

if not success then
    handleError(err)
end
